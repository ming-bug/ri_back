// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Shimix",
            "email": "Shiming.Xue@hgc.com.hk"
        },
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/campaign/myCampaigns": {
            "get": {
                "description": "Get campaign info by email, current page and page size",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "campaign"
                ],
                "summary": "Get user basic campaign info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user identify",
                        "name": "userUin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "list current page",
                        "name": "current",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "list page size",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ResultCont"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ResultCont"
                        }
                    }
                }
            }
        },
        "/api/user/current": {
            "get": {
                "description": "get current user info, include name \u0026 groups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "get current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ResultCont"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ResultCont"
                        }
                    }
                }
            }
        },
        "/api/user/groups": {
            "get": {
                "description": "Get all system groups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "System groups",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ResultCont"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ResultCont"
                        }
                    }
                }
            }
        },
        "/api/user/login": {
            "post": {
                "description": "verify login account by email, password and group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "login with login info",
                "parameters": [
                    {
                        "description": "user login info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ResultCont"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/model.ResultCont"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ResultCont"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.ResultCont"
                        }
                    }
                }
            }
        },
        "/api/user/outLogin": {
            "post": {
                "description": "logout and return nil",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "logout current account",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ResultCont"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.LoginInfo": {
            "type": "object",
            "properties": {
                "autoLogin": {
                    "type": "boolean",
                    "example": true
                },
                "email": {
                    "type": "string",
                    "example": "abc@abc.com"
                },
                "groupUin": {
                    "type": "string",
                    "example": "2"
                },
                "password": {
                    "type": "string",
                    "example": "p@ssword1"
                }
            }
        },
        "model.ResultCont": {
            "type": "object",
            "properties": {
                "data": {},
                "errorCode": {
                    "type": "string",
                    "example": "200"
                },
                "errorMessage": {
                    "type": "string"
                },
                "showType": {
                    "description": "error display type： 0 silent; 1 message.warn; 2 message.error; 4 notification; 9 page",
                    "type": "integer",
                    "example": 0
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8002",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "ri 后台查询",
	Description: "Query about summary report of campaign.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
